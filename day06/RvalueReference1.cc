/*
在 C++98/03 标准的基础上，C++11 标准对 C++ 语言增添了约 140 个新特性。
本节要讲的右值引用就是众多新特性中的一个，同时也是最重要的特性之一。
*/
/*
左值的英文简写为lvalue，右值的英文简写为rvalue
通常情况下，判断某个表达式是左值还是右值，最常用的有以下两种方法
1.可位于赋值号(=)左侧的的表达式就是左值；反之，只能位于赋值号右侧的表达式就是右值
int a = 5;
5 = a;  // 错误 5不能为左值
其中，变量a就是一个左值，而字面量5就是一个右值，值得一提的是，
C++中的左值也可以当作右值使用，例如：
int b = 10;   // b是一个左值
a = b;        // a,b都是左值，只不过将b可以当作右值使用
2.有名称的、可以获取到存储地址的表达式即为左值；反之则是右值
以上面定义的变量 a、b 为例，a 和 b 是变量名，且通过 &a 和 &b 可以获得他们的存储地址，
因此 a 和 b 都是左值；反之，字面量 5、10，它们既没有名称，
也无法获取其存储地址（字面量通常存储在寄存器中，或者和代码存储在一起），因此 5、10 都是右值。
*/
/*
接下来讲解一下 C++右值引用
int num = 10;
int &a = num;  // 正确
int &c = 10;   // 错误
编译器允许我们为 num 左值建立一个引用，但不可以为 10 这个右值建立引用。因此，C++98/03 标准中的引用又称为左值引用。
虽然 C++98/03 标准不支持为右值建立非常量左值引用，但允许使用常量左值引用操作右值。也就是说，常量左值引用既可以操作左值，也可以操作右值，例如：
int num = 10;
const int &b = num;
const int &c = 10;
我们知道，右值往往是没有名称的，因此要使用它只能借助引用的方式。这就产生一个问题，实际开发中我们可能需要对右值进行修改（实现移动语义时就需要），显然常量左值引用的方式是行不通的。

为此，C++11 标准新引入了另一种引用方式，称为右值引用，用 “&&” 表示
需要注意的，和声明左值引用一样，右值引用也必须立即进行初始化操作，且只能使用右值进行初始化，比如：
int num = 10;
const int &b = num;
const int &c = 10;

和常量左值引用不同的是，右值引用还可以对右值进行修改，如
int num = 10;
int && a = 10;
a  = 100;
cout << a << endl;
*/
#include <iostream>
int main(){
    int && a = 10;
    a = 100;
    std::cout << "a = " << a << std::endl;

    return 0;
}